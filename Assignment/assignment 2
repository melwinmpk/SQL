Q.1 :

WHAT ARE THE TOP 5 SELLING (NO OF UNITS SOLD)BIKES MODELS IN THE DATA SET.


ans:

select p.product_name,sum(s.quantity) as sum_of_products 
from production.products as p 
inner join sales.order_items as s 
on p.product_id = s.product_id 
group by p.product_name 
order by sum_of_products desc
LIMIT 5;

2.)Show a trend in electric bike sales(number of units sold) from 2016 to 2018, aggregate data by month & year.

3.)Sort the stores based on average order value.

4.)Sort the stores based on average order quantity

5.)Sort the stores based on total sales( selling price )

6.)Which store sold the most children bikes?

7.)Customers from  which state bought the most bikes?

8.)Which is the most stocked bike in stores?

9.)Which bike model was sold at the highest discount( use average discount over all sales )?

10.)Does Santacruz sell more mountain bikes than Baldwin?

11.)What was the sale value of the single larges order?

12.)What was the cheapest bike model sold in 2017?

13.)Total number of bikes that have been sold.

14.)Total sales per year(price)

15.)Total sales per store( price)

16.)List the sales (total amount ) driven by each staff member in descending order

17.)What's the average order fulfillment time ( Shippeddate -order date)?

18.)Which store has the shortest average fulfillment time per order?

19.)WHAT ARE THE LEAST 2 SELLING BRANDS (NO OF UNITS SOLD)BIKES MODELS IN THE DATA SET.

20.)what are the 3 montsh with most bike sales '.



------ Bike DB Create Statement ------------------

-- create schemas
	CREATE SCHEMA production;



	CREATE SCHEMA sales;


	-- create tables
	CREATE TABLE production.categories (
		category_id INT AUTO_INCREMENT PRIMARY KEY,
		category_name VARCHAR (255) NOT NULL
	);

	CREATE TABLE production.brands (
		brand_id INT AUTO_INCREMENT PRIMARY KEY,
		brand_name VARCHAR (255) NOT NULL
	);

	CREATE TABLE production.products (
		product_id INT AUTO_INCREMENT PRIMARY KEY,
		product_name VARCHAR (255) NOT NULL,
		brand_id INT NOT NULL,
		category_id INT NOT NULL,
		model_year SMALLINT NOT NULL,
		list_price DECIMAL (10, 2) NOT NULL,
		FOREIGN KEY (category_id) REFERENCES production.categories (category_id) ON DELETE CASCADE ON UPDATE CASCADE,
		FOREIGN KEY (brand_id) REFERENCES production.brands (brand_id) ON DELETE CASCADE ON UPDATE CASCADE
	);

	CREATE TABLE sales.customers (
		customer_id INT AUTO_INCREMENT PRIMARY KEY,
		first_name VARCHAR (255) NOT NULL,
		last_name VARCHAR (255) NOT NULL,
		phone VARCHAR (25),
		email VARCHAR (255) NOT NULL,
		street VARCHAR (255),
		city VARCHAR (50),
		state VARCHAR (25),
		zip_code VARCHAR (5)
	);

	CREATE TABLE sales.stores (
		store_id INT AUTO_INCREMENT PRIMARY KEY,
		store_name VARCHAR (255) NOT NULL,
		phone VARCHAR (25),
		email VARCHAR (255),
		street VARCHAR (255),
		city VARCHAR (255),
		state VARCHAR (10),
		zip_code VARCHAR (5)
	);

	CREATE TABLE sales.staffs (
		staff_id INT AUTO_INCREMENT PRIMARY KEY,
		first_name VARCHAR (50) NOT NULL,
		last_name VARCHAR (50) NOT NULL,
		email VARCHAR (255) NOT NULL UNIQUE,
		phone VARCHAR (25),
		active tinyint NOT NULL,
		store_id INT NOT NULL,
		manager_id INT,
		FOREIGN KEY (store_id) REFERENCES sales.stores (store_id) ON DELETE CASCADE ON UPDATE CASCADE,
		FOREIGN KEY (manager_id) REFERENCES sales.staffs (staff_id) ON DELETE NO ACTION ON UPDATE NO ACTION
	);

	CREATE TABLE sales.orders (
		order_id INT AUTO_INCREMENT PRIMARY KEY,
		customer_id INT,
		order_status tinyint NOT NULL,
		-- Order status: 1 = Pending; 2 = Processing; 3 = Rejected; 4 = Completed
		order_date DATE NOT NULL,
		required_date DATE NOT NULL,
		shipped_date DATE,
		store_id INT NOT NULL,
		staff_id INT NOT NULL,
		FOREIGN KEY (customer_id) REFERENCES sales.customers (customer_id) ON DELETE CASCADE ON UPDATE CASCADE,
		FOREIGN KEY (store_id) REFERENCES sales.stores (store_id) ON DELETE CASCADE ON UPDATE CASCADE,
		FOREIGN KEY (staff_id) REFERENCES sales.staffs (staff_id) ON DELETE NO ACTION ON UPDATE NO ACTION
	);

	CREATE TABLE sales.order_items (
		order_id INT,
		item_id INT,
		product_id INT NOT NULL,
		quantity INT NOT NULL,
		list_price DECIMAL (10, 2) NOT NULL,
		discount DECIMAL (4, 2) NOT NULL DEFAULT 0,
		PRIMARY KEY (order_id, item_id),
		FOREIGN KEY (order_id) REFERENCES sales.orders (order_id) ON DELETE CASCADE ON UPDATE CASCADE,
		FOREIGN KEY (product_id) REFERENCES production.products (product_id) ON DELETE CASCADE ON UPDATE CASCADE
	);

	CREATE TABLE production.stocks (
		store_id INT,
		product_id INT,
		quantity INT,
		PRIMARY KEY (store_id, product_id),
		FOREIGN KEY (store_id) REFERENCES sales.stores (store_id) ON DELETE CASCADE ON UPDATE CASCADE,
		FOREIGN KEY (product_id) REFERENCES production.products (product_id) ON DELETE CASCADE ON UPDATE CASCADE
	);



Page 42, 74, 86, 214(last insert query)

Q.1 : WHAT ARE THE TOP 5 SELLING (NO OF UNITS SOLD)BIKES MODELS IN THE DATA SET.

SELECT p.product_name, SUM(o.quantity) as UNITS FROM production.products p 
INNER JOIN sales.order_items o ON p.product_id = o.product_id
GROUP BY p.product_name
ORDER BY SUM(o.quantity) desc
LIMIT 5;

mysql> SELECT p.product_name, SUM(o.quantity) as UNITS FROM production.products p
    -> INNER JOIN sales.order_items o ON p.product_id = o.product_id
    -> GROUP BY p.product_name
    -> ORDER BY SUM(o.quantity) desc
    -> LIMIT 5;
+-----------------------------------------------+-------+
| product_name                                  | UNITS |
+-----------------------------------------------+-------+
| Electra Cruiser 1 (24-Inch) - 2016            |   295 |
| Electra Girl's Hawaii 1 (16-inch) - 2015/2016 |   269 |
| Surly Ice Cream Truck Frameset - 2016         |   167 |
| Electra Townie Original 7D EQ - 2016          |   154 |
| Trek Slash 8 27.5 - 2016                      |   154 |
+-----------------------------------------------+-------+
5 rows in set (0.01 sec)

2.)Show a trend in electric bike sales(number of units sold) from 2016 to 2018, aggregate data by month & year.

mysql> WITH  TEMP AS
    -> (
    -> SELECT YEAR(o.order_date) AS SALE_YEAR, MONTH(o.order_date) AS SALE_MONTH, SUM((oi.list_price-oi.discount)*oi.quantity) as Sales
    -> FROM sales.orders o
    -> LEFT JOIN sales.order_items oi ON o.order_id = oi.order_id
    -> INNER JOIN production.products as p ON oi.product_id = p.product_id
    -> INNER JOIN production.categories as c ON p.category_id = c.category_id
    -> WHERE c.category_name = 'Electric Bikes' and o.order_status = 4
    -> GROUP BY YEAR(order_date),MONTH(o.order_date)
    -> )
    -> SELECT SALE_YEAR, SALE_MONTH, Sales, (Sales - LAG(Sales) OVER( ORDER BY SALE_YEAR, SALE_MONTH )) as Trend
    -> FROM TEMP
    -> ORDER BY SALE_YEAR, SALE_MONTH;
+-----------+------------+----------+-----------+
| SALE_YEAR | SALE_MONTH | Sales    | Trend     |
+-----------+------------+----------+-----------+
|      2016 |          1 | 29998.62 |      NULL |
|      2016 |          2 | 11999.56 | -17999.06 |
|      2016 |          3 | 26999.16 |  14999.60 |
|      2016 |          5 |  8999.60 | -17999.56 |
|      2016 |          6 | 32998.89 |  23999.29 |
|      2016 |          7 | 29998.93 |  -2999.96 |
|      2016 |          8 | 23999.09 |  -5999.84 |
|      2016 |          9 | 26999.29 |   3000.20 |
|      2016 |         10 | 44998.19 |  17998.90 |
|      2016 |         11 | 38998.48 |  -5999.71 |
|      2016 |         12 | 32998.60 |  -5999.88 |
|      2017 |          1 | 40118.63 |   7120.03 |
|      2017 |          2 |  9679.26 | -30439.37 |
|      2017 |          3 | 10559.31 |    880.05 |
|      2017 |          4 | 12999.67 |   2440.36 |
|      2017 |          5 | 15999.46 |   2999.79 |
|      2017 |          6 | 30559.28 |  14559.82 |
|      2017 |          7 | 18358.74 | -12200.54 |
|      2017 |          8 | 50917.85 |  32559.11 |
|      2017 |          9 | 38238.98 | -12678.87 |
|      2017 |         10 | 17999.49 | -20239.49 |
|      2017 |         11 | 31559.21 |  13559.72 |
|      2017 |         12 | 35999.09 |   4439.88 |
|      2018 |          1 | 75318.19 |  39319.10 |
|      2018 |          2 | 53797.67 | -21520.52 |
|      2018 |          3 | 65957.73 |  12160.06 |
+-----------+------------+----------+-----------+
26 rows in set (0.00 sec)

3.)Sort the stores based on average order value.

mysql> select s.store_id, AVG((oi.list_price - oi.discount)*oi.quantity)
    -> from sales.stores s
    -> LEFT JOIN sales.orders o ON o.store_id = s.store_id
    -> INNER JOIN sales.order_items oi ON o.order_id = oi.order_id
    -> GROUP BY s.store_id
    -> ORDER BY AVG((oi.list_price - oi.discount)*oi.quantity);
+----------+------------------------------------------------+
| store_id | AVG((oi.list_price - oi.discount)*oi.quantity) |
+----------+------------------------------------------------+
|        1 |                                    1738.546463 |
|        2 |                                    1809.010061 |
|        3 |                                    1835.647012 |
+----------+------------------------------------------------+
3 rows in set (0.01 sec)

4.)Sort the stores based on average order quantity

mysql> select s.store_id, AVG(oi.quantity)
    -> from sales.stores s
    -> LEFT JOIN sales.orders o ON o.store_id = s.store_id
    -> INNER JOIN sales.order_items oi ON o.order_id = oi.order_id
    -> GROUP BY s.store_id
    -> ORDER BY AVG(oi.quantity);
+----------+------------------+
| store_id | AVG(oi.quantity) |
+----------+------------------+
|        2 |           1.4949 |
|        1 |           1.5025 |
|        3 |           1.5039 |
+----------+------------------+
3 rows in set (0.01 sec)

5.)Sort the stores based on total sales( selling price )


mysql> select s.store_id, SUM((oi.list_price - oi.discount)*oi.quantity)
    -> from sales.stores s
    -> LEFT JOIN sales.orders o ON o.store_id = s.store_id
    -> INNER JOIN sales.order_items oi ON o.order_id = oi.order_id
    -> GROUP BY s.store_id
    -> ORDER BY SUM((oi.list_price - oi.discount)*oi.quantity);
+----------+------------------------------------------------+
| store_id | SUM((oi.list_price - oi.discount)*oi.quantity) |
+----------+------------------------------------------------+
|        3 |                                      939851.27 |
|        1 |                                     1705514.08 |
|        2 |                                     5651347.43 |
+----------+------------------------------------------------+
3 rows in set (0.01 sec)

6.)Which store sold the most children bikes? (in the category I didi not find the children bikes i found Children Bicycles)


mysql> SELECT s.store_name , SUM(oi.quantity) as UNITS
    -> FROM sales.stores s
    -> INNER JOIN sales.orders o ON s.store_id = o.store_id
    -> INNER JOIN sales.order_items oi ON o.order_id  = oi.order_id
    -> INNER JOIN production.products p ON oi.product_id = p.product_id
    -> INNER JOIN production.categories c ON p.category_id = c.category_id
    -> WHERE c.category_name = 'Children Bicycles'
    -> GROUP BY s.store_name
    -> ORDER BY SUM(oi.quantity) desc
    -> LIMIT 1;
+---------------+-------+
| store_name    | UNITS |
+---------------+-------+
| Baldwin Bikes |   809 |
+---------------+-------+
1 row in set (0.05 sec)

7.)Customers from  which state bought the most bikes?

mysql> SELECT cu.state , SUM(oi.quantity) as UNITS
    -> FROM sales.customers cu
    -> INNER JOIN sales.orders o ON cu.customer_id  = o.customer_id
    -> INNER JOIN sales.order_items oi ON o.order_id  = oi.order_id
    -> INNER JOIN production.products p ON oi.product_id = p.product_id
    -> GROUP BY cu.state
    -> ORDER BY SUM(oi.quantity) desc
    -> LIMIT 1;
+-------+-------+
| state | UNITS |
+-------+-------+
| NY    |  4764 |
+-------+-------+
1 row in set (0.01 sec)


8.)Which is the most stocked bike in stores?
WITH TEMP AS
(
SELECT s.store_name, p.product_name, SUM(quantity ) as UNITS
FROM sales.stores s
INNER JOIN production.stocks st ON s.store_id = st.store_id 
INNER JOIN production.products p ON st.product_id = p.product_id 
GROUP BY s.store_name, p.product_name
)
SELECT store_name, product_name, UNITS
FROM 
(
	SELECT store_name, product_name, UNITS, RANK() OVER(PARTITION BY store_name ORDER BY UNITS DESC) as rnk
FROM TEMP ) x
WHERE  rnk = 1;

mysql> WITH TEMP AS
    -> (
    -> SELECT s.store_name, p.product_name, SUM(quantity ) as UNITS
    -> FROM sales.stores s
    -> INNER JOIN production.stocks st ON s.store_id = st.store_id
    -> INNER JOIN production.products p ON st.product_id = p.product_id
    -> GROUP BY s.store_name, p.product_name
    -> )
    -> SELECT store_name, product_name, UNITS
    -> FROM
    -> (
    ->  SELECT store_name, product_name, UNITS, RANK() OVER(PARTITION BY store_name ORDER BY UNITS DESC) as rnk
    -> FROM TEMP ) x
    -> WHERE  rnk = 1;
+------------------+-------------------------------------+-------+
| store_name       | product_name                        | UNITS |
+------------------+-------------------------------------+-------+
| Baldwin Bikes    | Sun Bicycles Cruz 7 - 2017          |    51 |
| Baldwin Bikes    | Electra Townie Commute 8D - 2018    |    51 |
| Rowlett Bikes    | Electra Townie Balloon 7i EQ - 2018 |    53 |
| Santa Cruz Bikes | Sun Bicycles Cruz 3 - 2017          |    60 |
+------------------+-------------------------------------+-------+


9.)Which bike model was sold at the highest discount( use average discount over all sales )?

Select 


10.)Does Santacruz sell more mountain bikes than Baldwin?

11.)What was the sale value of the single larges order?

12.)What was the cheapest bike model sold in 2017?

13.)Total number of bikes that have been sold.

14.)Total sales per year(price)

mysql> Select YEAR(o.order_date), SUM((oi.list_price-oi.discount)*quantity)
    -> FROM sales.orders o
    -> INNER JOIN sales.order_items oi ON o.order_id = oi.order_id
    -> WHERE o.order_status = 4
    -> GROUP BY YEAR(o.order_date);
+--------------------+-------------------------------------------+
| YEAR(o.order_date) | SUM((oi.list_price-oi.discount)*quantity) |
+--------------------+-------------------------------------------+
|               2016 |                                2456500.61 |
|               2017 |                                3665361.91 |
|               2018 |                                1043173.40 |
+--------------------+-------------------------------------------+
3 rows in set (0.01 sec)

15.)Total sales per store( price)

mysql> Select s.store_name, SUM((oi.list_price-oi.discount)*quantity)
    -> FROM sales.stores s
    -> INNER JOIN sales.orders o ON s.store_id = o.store_id
    -> INNER JOIN sales.order_items oi ON o.order_id = oi.order_id
    -> WHERE o.order_status = 4
    -> GROUP BY s.store_name;
+------------------+-------------------------------------------+
| store_name       | SUM((oi.list_price-oi.discount)*quantity) |
+------------------+-------------------------------------------+
| Santa Cruz Bikes |                                1318285.54 |
| Baldwin Bikes    |                                5084106.78 |
| Rowlett Bikes    |                                 762643.60 |
+------------------+-------------------------------------------+
3 rows in set (0.01 sec)

16.)List the sales (total amount ) driven by each staff member in descending order
mysql> select st.first_name , SUM((oi.list_price - oi.discount)*oi.quantity) as SALE
    -> FROM sales.staffs st
    -> INNER JOIN sales.orders o ON st.staff_id = o.staff_id
    -> INNER JOIN sales.order_items oi ON o.order_id = oi.order_id
    -> GROUP BY st.first_name
    -> ORDER BY SUM((oi.list_price - oi.discount)*oi.quantity) desc;
+------------+------------+
| first_name | SALE       |
+------------+------------+
| Marcelene  | 2851646.01 |
| Venita     | 2799701.42 |
| Genna      |  915655.60 |
| Mireya     |  789858.48 |
| Kali       |  499024.91 |
| Layla      |  440826.36 |
+------------+------------+
6 rows in set (0.01 sec)

17.)What's the average order fulfillment time ( Shippeddate -order date)?

18.)Which store has the shortest average fulfillment time per order?

19.)WHAT ARE THE LEAST 2 SELLING BRANDS (NO OF UNITS SOLD)BIKES MODELS IN THE DATA SET.

20.)what are the 3 montsh with most bike sales '.